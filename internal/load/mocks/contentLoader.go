// Code generated by MockGen. DO NOT EDIT.
// Source: contentLoader.go

// Package load is a generated GoMock package.
package load

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/rog-golang-buddies/internal/model"
)

// MockContentLoader is a mock of ContentLoader interface.
type MockContentLoader struct {
	ctrl     *gomock.Controller
	recorder *MockContentLoaderMockRecorder
}

// MockContentLoaderMockRecorder is the mock recorder for MockContentLoader.
type MockContentLoaderMockRecorder struct {
	mock *MockContentLoader
}

// NewMockContentLoader creates a new mock instance.
func NewMockContentLoader(ctrl *gomock.Controller) *MockContentLoader {
	mock := &MockContentLoader{ctrl: ctrl}
	mock.recorder = &MockContentLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentLoader) EXPECT() *MockContentLoaderMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockContentLoader) Load(ctx context.Context, url string) (*model.FileResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, url)
	ret0, _ := ret[0].(*model.FileResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockContentLoaderMockRecorder) Load(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockContentLoader)(nil).Load), ctx, url)
}
